classdef ODESolver < handle
    
    properties
        options = odeset
    end
    
    properties (SetAccess = private)
        order  = 1
        funfcn = @ode113
    end
    
    methods
        function obj = ODESolver(varargin)
            
            switch (nargin)
                
                % Allow empty object
                case 0
                    return;
                    
                % Standard solvers, with or without options structure    
                case {1 2}
                    solver = varargin{1};
                    
                    supported_solvers = {'rkn1210'
                                         'ode45'
                                         'ode113'};
                    
                    % TODO
                    assert(ischar(solver) && any(strcmpi(solver, supported_solvers)),...
                           [mfilename ':invalid_solver'],...
                           '');
                       
                    switch lower(solver)
                        case 'rkn1210'
                            obj.order  = 2;
                            obj.funfcn = @rkn1210;
                            
                        case 'ode45'
                            obj.order  = 1;
                            obj.funfcn = @ode45;
                            
                        case 'ode113'
                            % (default; no action)                        
                    end
                    
                    if nargin == 2
                        
                        opts = varargin{2};
                        
                        % TODO
                        assert(isstruct(opts),...
                               [mfilename ':'],...
                               '');
                           
                        obj.options = opts;
                        
                    end
                       
                otherwise
                    
                    % TODO
                    assert(mod(nargin,2)==0,...
                           [mfilename ':'],...
                           '');
                    
                    parameters = varargin(1:2:end);
                    values     = varargin(2:2:end);
                    
                    for ii = 1:numel(parameters)
                        
                        parameter = parameters{ii};
                        value     = values{ii};
                        
                        switch lower(parameter)
                            
                            case {'funfcn' 'solver'}
                                % TODO: assert
                                obj.funfcn = value;
                                
                            case {'order' }
                                assert(isnumeric(value) && isscalar(value),...
                                       [mfilename ':unsupported_solver_order'],...
                                       'Solver order must be a real, positive scalar integer.');
                                obj.order = value;
                                
                            case {'options' }
                                assert(isstruct(value),...
                                       [mfilename ':invalid_options'],...
                                       'Argument ''options'' must be a structure generated by odeset().');
                                obj.options = value;
                                
                            otherwise
                                % TODO: unsupported param
                                
                        end
                    end
                    
            end   
            
        end
        
        function name = get_name(obj)
            name = func2str(obj.funfcn);
        end
    end
    
end
